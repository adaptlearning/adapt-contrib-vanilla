.drawer {
  &__item-btn {
    display: block;
    padding: @drawer-item-padding-ver @drawer-item-padding-hoz;
    margin: @drawer-item-margin;
    border-bottom: @drawer-item-border-width solid;
    border-radius: @drawer-item-border-radius;

    & when (@drawer-item-margin > 0) {
      @total-margin: @drawer-item-margin * 2;
      width: calc(100% ~'-' @total-margin);
      border: @drawer-item-border-width solid;
    }

    & when (@drawer-item-color-style = filled) {
      .drawer-item-color();

      .no-touch &:not(.is-disabled):not(.is-locked):hover {
        .drawer-item-color-hover;
      }

      html:not(.a11y-disable-focusoutline) &:focus-visible {
        .drawer-item-color-focus;
      }
    }

    & when (@drawer-item-color-style = outline) {
      .drawer-item-color-outline();

      .no-touch &:not(.is-disabled):not(.is-locked):hover {
        .drawer-item-color-outline-hover;
      }

      html:not(.a11y-disable-focusoutline) &:focus-visible {
        .drawer-item-color-outline-focus;
      }
    }
  }

  &__item-btn.is-locked,
  &__item-btn.is-disabled {
    & when (@drawer-item-color-style = filled) {
      .drawer-item-color-locked;
    }

    & when (@drawer-item-color-style = outline) {
      .drawer-item-color-outline-locked;
    }
  }

  // aria-current="true" is used by languagePicker
  &__item-btn[aria-current="true"],
  &__item-btn.is-selected {
    & when (@drawer-item-color-style = filled) {
      .drawer-item-color-selected;
    }

    & when (@drawer-item-color-style = outline) {
      .drawer-item-color-outline-selected;
    }
  }

  &__item-title {
    .drawer-item-title;
    text-align: start;
  }

  &__item-title + &__item-body {
    margin-top: @drawer-title-margin;
  }

  &__item-body {
    margin-bottom: @drawer-body-margin;
    .drawer-item-body;
    text-align: start;
  }
}
